import PT_PC_UTIL:StringMap;
import PTEM_CONFIG:IEMConfigurationPlugin;
import PTEM_CONFIG:PTEMHelpMessage;
import PTEM_CONFIG:PTEMVariableProperty;
import PTEM_CONFIG:EMConfigurationPlugin;

class IOGatewayLBURLs extends PTEM_CONFIG:EMConfigurationPlugin
   method getPluginHelpMessage() Returns PTEM_CONFIG:PTEMHelpMessage;
   method getProperties() Returns array of PTEM_CONFIG:PTEMVariableProperty;
   
   method validateVariables(&variables As PT_PC_UTIL:StringMap, &plugin As string) Returns array of PTEM_CONFIG:PTEMHelpMessage;
   method configureEnvironment(&variables As PT_PC_UTIL:StringMap, &plugin As string) Returns array of PTEM_CONFIG:PTEMHelpMessage;
   method validateConfigurations(&variables As PT_PC_UTIL:StringMap, &plugin As string) Returns array of PTEM_CONFIG:PTEMHelpMessage;
   method dependant_plugins() Returns array of string;
   method isInternalPlugin() Returns boolean;
end-class;

Declare Function GatewayUpdateVersions PeopleCode FUNCLIB_IB.FUNCLIB FieldFormula;
Declare Function GatewayPSLOCK PeopleCode FUNCLIB_IB.FUNCLIB FieldFormula;

method getPluginHelpMessage
   /+ Returns PTEM_CONFIG:PTEMHelpMessage +/
   /+ Extends/implements PTEM_CONFIG:EMConfigurationPlugin.getPluginHelpMessage +/
   Local PTEM_CONFIG:PTEMHelpMessage &tempMessage = Null;
   &tempMessage = create PTEM_CONFIG:PTEMHelpMessage(0, 0, "Plugin to run processes", Null);
   Return &tempMessage;
end-method;

method configureEnvironment
   /+ &variables as PT_PC_UTIL:StringMap, +/
   /+ &plugin as String +/
   /+ Returns Array of PTEM_CONFIG:PTEMHelpMessage +/
   /+ Extends/implements PTEM_CONFIG:EMConfigurationPlugin.configureEnvironment +/
   
   Local PTEM_CONFIG:PTEMHelpMessage &tempMessage = Null;
   Local array of PTEM_CONFIG:PTEMHelpMessage &helpMsgArray = Null;
   
   /* *************************************** */
   /*  Configure Gateway Page with LB URL     */
   /* *************************************** */
   Local string &lbGatewayURL = &variables.get("env.lb_gateway_url");
   Local string &gatewayPort = &variables.get("env.gateway_port");
   Local string &gatewaySSLPort = &variables.get("env.gateway_ssl_port");
   Local string &localNode = &variables.get("env.default_local_node");
   Local string &gatewayLBHost = &variables.get("env.gateway_lb_host");
   Local string &gatewayLBHostURL;
   Local boolean &doUpdateFlag;
   Local number &version, &seqNum;
   
   Local Record &psGateway = CreateRecord(Record.PSGATEWAY);
   &psGateway.CONNGATEWAYID.Value = "LOCAL";
   &doUpdateFlag = &psGateway.SelectByKey();
   
   &version = GatewayUpdateVersions();
   &psGateway.VERSION.Value = &version;
   If &variables.getlocal("env.use_ssl_gateway", String(%This)) = "true" Then
      If &gatewaySSLPort = "443" Then
         &psGateway.CONNURL.Value = "https://" | &lbGatewayURL | "/PSIGW/PeopleSoftListeningConnector/" | &localNode;
      Else
         &psGateway.CONNURL.Value = "https://" | &lbGatewayURL | ":" | &gatewaySSLPort | "/PSIGW/PeopleSoftListeningConnector/" | &localNode;
      End-If;
      
   Else
      &psGateway.CONNURL.Value = "http://" | &lbGatewayURL | ":" | &gatewayPort | "/PSIGW/PeopleSoftListeningConnector/" | &localNode;
   End-If;
   
   If &doUpdateFlag Then
      &psGateway.Update();
   Else
      &psGateway.CONNGATEWAYID.Value = "LOCAL";
      &psGateway.Insert();
   End-If;
   
   /* *************************************** */
   /*  Set Gateway Page as Load Balanced      */
   /* *************************************** */
   Local Record &psIBLoadBalURL = CreateRecord(Record.PSIBLOADBALURL);
   /*&psIBLoadBalURL.CONNGATEWAYID.Value = "LOCAL";
   &doUpdateFlag = &psIBLoadBalURL.SelectByKey();*/
   
   If &variables.getlocal("env.enable_lb_gateway", String(%This)) = "true" Then
      &psIBLoadBalURL.PT_IBGWLDBALURL.Value = "Y";
   Else
      &psIBLoadBalURL.PT_IBGWLDBALURL.Value = "N";
   End-If;
   &psIBLoadBalURL.CONNGATEWAYID.Value = "LOCAL";
   &psIBLoadBalURL.Update();
   
   /*If &doUpdateFlag Then
      &psIBLoadBalURL.Update();
   Else
      &psIBLoadBalURL.CONNGATEWAYID.Value = "LOCAL";
      &psIBLoadBalURL.Insert();
   End-If;*/
   
   /* *************************************** */
   /*  Add Host to the list of LB Gateways    */
   /* *************************************** */
   &gatewayLBHostURL = "http://" | &gatewayLBHost | ":" | &gatewayPort | "/PSIGW/PeopleSoftListeningConnector";
   rem  | &localNode;
   If &variables.getlocal("env.enable_lb_gateway", String(%This)) = "true" Then
      Local Record &psIBLBURLS = CreateRecord(Record.PSIBLBURLS);
      &psIBLBURLS.CONNURL.Value = &gatewayLBHost;
      &doUpdateFlag = &psIBLBURLS.SelectByKey();
      
      &psIBLBURLS.IB_LOCALIDFLG.Value = "1";
      
      If &doUpdateFlag Then
         &psIBLBURLS.Update();
      Else
         &psIBLBURLS.CONNURL.Value = &gatewayLBHostURL;
         &psIBLBURLS.Insert();
      End-If;
      
      Local Record &psIBGatewayURLS = CreateRecord(Record.PSIBGATEWAYURLS);
      &psIBGatewayURLS.CONNGATEWAYID.Value = "LOCAL";
      &psIBGatewayURLS.CONNURL.Value = &gatewayLBHost;
      &doUpdateFlag = &psIBGatewayURLS.SelectByKey();
      
      If Not &doUpdateFlag Then
         &psIBGatewayURLS.CONNGATEWAYID.Value = "LOCAL";
         
         &psIBGatewayURLS.CONNURL.Value = &gatewayLBHostURL;
         SQLExec("select max(seqnum) from %Table(:1)", Record.PSIBGATEWAYURLS, &seqNum);
         &psIBGatewayURLS.SEQNUM.Value = &seqNum + 1;
         &psIBGatewayURLS.Insert();
      End-If;
   End-If;
   
   GatewayPSLOCK();
   
   /* *************************************** */
   /*  Set IB Service URLs to LB URL          */
   /* *************************************** */
   Local Record &psIBSvcSetup = CreateRecord(Record.PSIBSVCSETUP);
   &psIBSvcSetup.SEQNO.Value = "1";
   &doUpdateFlag = &psIBSvcSetup.SelectByKey();
   
   If &variables.getlocal("env.use_ssl_gateway", String(%This)) = "true" Then
      If &gatewaySSLPort = "443" Then
         &psIBSvcSetup.IB_SECTGTLOCATION.Value = "https://" | &lbGatewayURL | "/PSIGW/PeopleSoftServiceListeningConnector/" | &localNode;
         &psIBSvcSetup.IB_RESTSECTGTLOC.Value = "https://" | &lbGatewayURL | "/PSIGW/RESTListeningConnector/" | &localNode;
      Else
         &psIBSvcSetup.IB_SECTGTLOCATION.Value = "https://" | &lbGatewayURL | ":" | &gatewaySSLPort | "/PSIGW/PeopleSoftServiceListeningConnector/" | &localNode;
         &psIBSvcSetup.IB_RESTSECTGTLOC.Value = "https://" | &lbGatewayURL | ":" | &gatewaySSLPort | "/PSIGW/RESTListeningConnector/" | &localNode;
      End-If;
   Else
      &psIBSvcSetup.IB_SECTGTLOCATION.Value = "";
      &psIBSvcSetup.IB_RESTSECTGTLOC.Value = "";
      &psIBSvcSetup.IB_TGTLOCATION.Value = "http://" | &lbGatewayURL | ":" | &gatewayPort | "/PSIGW/PeopleSoftServiceListeningConnector/" | &localNode;
      &psIBSvcSetup.IB_RESTTGTLOC.Value = "http://" | &lbGatewayURL | ":" | &gatewayPort | "/PSIGW/RESTListeningConnector/" | &localNode;
   End-If;
   
   
   If &doUpdateFlag Then
      &psIBSvcSetup.Update();
   End-If;
   
   
   
   Return &helpMsgArray;
   
end-method;

method getProperties
   /+ Returns Array of PTEM_CONFIG:PTEMVariableProperty +/
   /+ Extends/implements PTEM_CONFIG:EMConfigurationPlugin.getProperties +/
   
   rem TODO insert properties code here;
   Local array of PTEM_CONFIG:PTEMVariableProperty &propArray = Null;
   Local PTEM_CONFIG:PTEMVariableProperty &variableProperty = Null;
   
   &variableProperty = create PTEM_CONFIG:PTEMVariableProperty("env.lb_gateway_url", "string", True, False, "@host@.@domain@", 262, 1110, "Gateway host", Null);
   &propArray = CreateArray(&variableProperty);
   &variableProperty = create PTEM_CONFIG:PTEMVariableProperty("env.gateway_port", "number", True, False, "@httpport@", 262, 1111, "Gateway port", Null);
   &propArray.Push(&variableProperty);
   &variableProperty = create PTEM_CONFIG:PTEMVariableProperty("env.gateway_ssl_port", "number", True, False, "@sslport@", 262, 1112, "Gateway SSL port", Null);
   &propArray.Push(&variableProperty);
   &variableProperty = create PTEM_CONFIG:PTEMVariableProperty("env.use_ssl_gateway", "boolean", False, False, "false", 262, 1113, "Use SSL gateway; Flag determines if the configuration is secure(https) or non secure (http); True-> https, false->http", Null);
   &propArray.Push(&variableProperty);
   &variableProperty = create PTEM_CONFIG:PTEMVariableProperty("env.default_local_node", "string", True, False, "@nodename@", 262, 1103, "Default local node", Null);
   &propArray.Push(&variableProperty);
   &variableProperty = create PTEM_CONFIG:PTEMVariableProperty("env.enable_lb_gateway", "boolean", False, False, "false", 262, 1113, "Add the Gateway to the list of Load Balanced Gateways", Null);
   &propArray.Push(&variableProperty);
   &variableProperty = create PTEM_CONFIG:PTEMVariableProperty("env.gateway_lb_host", "string", True, False, "@host@.@domain@", 262, 1110, "LB Gateway host", Null);
   &propArray = CreateArray(&variableProperty);
   
   Return &propArray;
   
end-method;

method validateVariables
   /+ &variables as PT_PC_UTIL:StringMap, +/
   /+ &plugin as String +/
   /+ Returns Array of PTEM_CONFIG:PTEMHelpMessage +/
   /+ Extends/implements PTEM_CONFIG:EMConfigurationPlugin.validateVariables +/
   Return Null;
end-method;

method validateConfigurations
   /+ &variables as PT_PC_UTIL:StringMap, +/
   /+ &plugin as String +/
   /+ Returns Array of PTEM_CONFIG:PTEMHelpMessage +/
   /+ Extends/implements PTEM_CONFIG:EMConfigurationPlugin.validateConfigurations +/
   Return Null;
end-method;

method dependant_plugins
   /+ Returns Array of String +/
   /+ Extends/implements PTEM_CONFIG:EMConfigurationPlugin.dependant_plugins +/
   Local array of string &dependant_array;
   &dependant_array = CreateArray("");
   Return &dependant_array;
end-method;

method isInternalPlugin
   /+ Returns Boolean +/
   /+ Extends/implements PTEM_CONFIG:EMConfigurationPlugin.isInternalPlugin +/
   Return False;
end-method;

